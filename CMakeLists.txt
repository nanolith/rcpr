cmake_minimum_required(VERSION 3.22)
cmake_policy(SET CMP0048 NEW)
PROJECT(rcpr VERSION 0.4.0)

string(REPLACE "." ";" RCPR_VERSION_LIST "${CMAKE_PROJECT_VERSION}")
list(GET RCPR_VERSION_LIST 0 RCPR_VERSION_MAJOR)
list(GET RCPR_VERSION_LIST 1 RCPR_VERSION_MINOR)
list(GET RCPR_VERSION_LIST 2 RCPR_VERSION_REL)

cmake_minimum_required(VERSION 3.10)

INCLUDE(CheckSymbolExists)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules")

option(MODELCHECK_REQUIRED "Require Model Checking")
option(PSOCK_ASYNC_USE_POLL "Use poll() for psock async I/O.")
option(RCPR_VTABLE_RUNTIME_ENFORCEMENT "Runtime checks for vtable segment")
option(RCPR_VTABLE_CHECK_ASSERT "Runtime vtable check is an assertion" ON)

#minunit package
find_package(minunit REQUIRED)
#threads package
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads)

#detect fibers
include ("cmake/fibers.cmake")

#detect psock async
include ("cmake/psock.cmake")

#detect C++ compiler options
include ("cmake/cpp.cmake")

#Build config.h
configure_file(config.h.cmake include/rcpr/config.h)

#includes
INCLUDE_DIRECTORIES(include)
INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/include)

#source files
AUX_SOURCE_DIRECTORY(src/allocator RCPR_ALLOCATOR_SOURCES)
AUX_SOURCE_DIRECTORY(src/bigint RCPR_BIGINT_SOURCES)
AUX_SOURCE_DIRECTORY(src/condition RCPR_CONDITION_SOURCES)
AUX_SOURCE_DIRECTORY(src/condition/fiber RCPR_CONDITION_FIBER_SOURCES)
AUX_SOURCE_DIRECTORY(src/fiber/common RCPR_FIBER_SOURCES)
AUX_SOURCE_DIRECTORY(src/list RCPR_LIST_SOURCES)
AUX_SOURCE_DIRECTORY(src/message RCPR_MESSAGE_SOURCES)
FILE(GLOB RCPR_PSOCK_SOURCES src/psock/*.c)
AUX_SOURCE_DIRECTORY(src/queue RCPR_QUEUE_SOURCES)
AUX_SOURCE_DIRECTORY(src/resource RCPR_RESOURCE_SOURCES)
AUX_SOURCE_DIRECTORY(src/platform/pthread/thread RCPR_PTHREAD_THREAD_SOURCES)
AUX_SOURCE_DIRECTORY(src/rbtree RCPR_RBTREE_SOURCES)
AUX_SOURCE_DIRECTORY(src/slist RCPR_SLIST_SOURCES)
AUX_SOURCE_DIRECTORY(src/socket_utilities RCPR_SOCKET_UTILITIES_SOURCES)
AUX_SOURCE_DIRECTORY(src/stack RCPR_STACK_SOURCES)
AUX_SOURCE_DIRECTORY(src/string RCPR_STRING_SOURCES)
AUX_SOURCE_DIRECTORY(src/uuid RCPR_UUID_SOURCES)
SET(RCPR_SOURCES
    ${RCPR_ALLOCATOR_SOURCES}
    ${RCPR_BIGINT_SOURCES}
    ${RCPR_LIST_SOURCES}
    ${RCPR_PSOCK_SOURCES}
    ${RCPR_QUEUE_SOURCES}
    ${RCPR_RBTREE_SOURCES}
    ${RCPR_RESOURCE_SOURCES}
    ${RCPR_SLIST_SOURCES}
    ${RCPR_SOCKET_UTILITIES_SOURCES}
    ${RCPR_STACK_SOURCES}
    ${RCPR_STRING_SOURCES}
    ${RCPR_UUID_SOURCES})

if (HAS_PSOCK_ASYNC)
SET(RCPR_SOURCES ${RCPR_SOURCES} ${RCPR_PSOCK_ASYNC_SOURCES})
endif ()

#test source files
AUX_SOURCE_DIRECTORY(test/allocator RCPR_TEST_ALLOCATOR_SOURCES)
AUX_SOURCE_DIRECTORY(test/bigint RCPR_TEST_BIGINT_SOURCES)
AUX_SOURCE_DIRECTORY(test/condition RCPR_TEST_CONDITION_SOURCES)
AUX_SOURCE_DIRECTORY(test/control RCPR_TEST_CONTROL_SOURCES)
AUX_SOURCE_DIRECTORY(test/fiber RCPR_TEST_FIBER_SOURCES)
AUX_SOURCE_DIRECTORY(test/list RCPR_TEST_LIST_SOURCES)
AUX_SOURCE_DIRECTORY(test/mock_allocator RCPR_TEST_MOCK_ALLOCATOR_SOURCES)
AUX_SOURCE_DIRECTORY(test/message RCPR_TEST_MESSAGE_SOURCES)
FILE(GLOB RCPR_TEST_PSOCK_SOURCES test/psock/*.cpp)
FILE(GLOB RCPR_TEST_PSOCK_ASYNC_SOURCES test/psock/async/*.cpp)
AUX_SOURCE_DIRECTORY(test/queue RCPR_TEST_QUEUE_SOURCES)
AUX_SOURCE_DIRECTORY(test/resource RCPR_TEST_RESOURCE_SOURCES)
AUX_SOURCE_DIRECTORY(
    test/platform/pthread/thread RCPR_TEST_PTHREAD_THREAD_SOURCES)
AUX_SOURCE_DIRECTORY(test/rbtree RCPR_TEST_RBTREE_SOURCES)
AUX_SOURCE_DIRECTORY(test/slist RCPR_TEST_SLIST_SOURCES)
AUX_SOURCE_DIRECTORY(test/socket_utilities RCPR_TEST_SOCKET_UTILITIES_SOURCES)
AUX_SOURCE_DIRECTORY(test/stack RCPR_TEST_STACK_SOURCES)
AUX_SOURCE_DIRECTORY(test/string RCPR_TEST_STRING_SOURCES)
AUX_SOURCE_DIRECTORY(test/uuid RCPR_TEST_UUID_SOURCES)
SET(RCPR_TEST_SOURCES 
    ${RCPR_TEST_ALLOCATOR_SOURCES}
    ${RCPR_TEST_BIGINT_SOURCES}
    ${RCPR_TEST_CONDITION_SOURCES}
    ${RCPR_TEST_CONTROL_SOURCES}
    ${RCPR_TEST_LIST_SOURCES}
    ${RCPR_TEST_MOCK_ALLOCATOR_SOURCES}
    ${RCPR_TEST_PSOCK_SOURCES}
    ${RCPR_TEST_QUEUE_SOURCES}
    ${RCPR_TEST_RBTREE_SOURCES}
    ${RCPR_TEST_RESOURCE_SOURCES}
    ${RCPR_TEST_SLIST_SOURCES}
    ${RCPR_TEST_SOCKET_UTILITIES_SOURCES}
    ${RCPR_TEST_STACK_SOURCES}
    ${RCPR_TEST_STRING_SOURCES}
    ${RCPR_TEST_UUID_SOURCES})

if (HAS_PSOCK_ASYNC)
SET(RCPR_TEST_SOURCES ${RCPR_TEST_SOURCES} ${RCPR_TEST_PSOCK_ASYNC_SOURCES})
endif ()

#conditional compilation for Threads
if (Threads_FOUND)
    SET(RCPR_SOURCES ${RCPR_SOURCES} ${RCPR_PTHREAD_THREAD_SOURCES})
    SET(RCPR_TEST_SOURCES
            ${RCPR_TEST_SOURCES}
            ${RCPR_TEST_PTHREAD_THREAD_SOURCES})
endif ()

#conditional compilation for fibers
if (RCPR_FIBER_FOUND)
    SET(RCPR_SOURCES
        ${RCPR_SOURCES}
        ${RCPR_CONDITION_FIBER_SOURCES}
        ${RCPR_CONDITION_SOURCES}
        ${RCPR_FIBER_SOURCES}
        ${RCPR_FIBER_PLATFORM_SOURCES}
        ${RCPR_MESSAGE_SOURCES})
    SET(RCPR_TEST_SOURCES
        ${RCPR_TEST_FIBER_SOURCES}
        ${RCPR_TEST_MESSAGE_SOURCES}
        ${RCPR_TEST_SOURCES})
endif()

ADD_LIBRARY(rcpr STATIC
    ${RCPR_SOURCES})
TARGET_COMPILE_OPTIONS(
    rcpr PRIVATE -fPIC -O2
    -Wall -Werror -Wextra -Wpedantic -Wno-unused-command-line-argument
    ${USE_EXTERN_ASSEMBLER})

ADD_LIBRARY(rcpr-${CMAKE_PROJECT_VERSION} SHARED
    ${RCPR_SOURCES})
TARGET_COMPILE_OPTIONS(
    rcpr-${CMAKE_PROJECT_VERSION} PRIVATE -fPIC -O2
    -Wall -Werror -Wextra -Wpedantic -Wno-unused-command-line-argument
    ${USE_EXTERN_ASSEMBLER})

ADD_EXECUTABLE(testrcpr
    ${RCPR_SOURCES} ${RCPR_TEST_SOURCES})

TARGET_COMPILE_OPTIONS(
    testrcpr PRIVATE -g -O0 --coverage ${MINUNIT_CFLAGS}
                     -Wall -Werror -Wextra -Wpedantic
                     -Wno-unused-command-line-argument ${USE_EXTERN_ASSEMBLER})
TARGET_LINK_LIBRARIES(testrcpr PRIVATE -g -O0 --coverage ${MINUNIT_LDFLAGS})
set_source_files_properties(
    ${RCPR_TEST_SOURCES} PROPERTIES
    COMPILE_FLAGS "${STD_CXX_20} ${USE_INTERN_ASSEMBLER}")

#conditional link for Threads
if (Threads_FOUND)
    TARGET_LINK_LIBRARIES(rcpr-${CMAKE_PROJECT_VERSION} PUBLIC Threads::Threads)
    TARGET_LINK_LIBRARIES(testrcpr PRIVATE Threads::Threads)
endif()

ADD_CUSTOM_TARGET(
    test
    COMMAND testrcpr
    DEPENDS testrcpr)

ADD_CUSTOM_TARGET(
    model_checks
    COMMAND make
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/models)

if (MODELCHECK_REQUIRED)
    ADD_DEPENDENCIES(testrcpr model_checks)
endif()

#Build a pkg-config file
SET(RCPR_PC "${CMAKE_BINARY_DIR}/rcpr.pc")
FILE(WRITE  ${RCPR_PC} "Name: rcpr")
FILE(APPEND ${RCPR_PC} "\nDescription: Reliable C Portable Runtime")
FILE(APPEND ${RCPR_PC} "\nVersion: ${CMAKE_PROJECT_VERSION}")
FILE(APPEND ${RCPR_PC} "\nURL: https://github.com/nanolith/rcpr")
FILE(APPEND ${RCPR_PC} "\nprefix=${CMAKE_INSTALL_PREFIX}")
FILE(APPEND ${RCPR_PC} "\nlibdir=\${prefix}/lib")
FILE(APPEND ${RCPR_PC} "\nincludedir=\${prefix}/include")
FILE(APPEND ${RCPR_PC} "\nLibs: -L\${libdir} -lrcpr")
FILE(APPEND ${RCPR_PC} "\nCflags: -I\${includedir}")
INSTALL(FILES ${RCPR_PC} DESTINATION lib/pkgconfig)

#Install headers
FILE(GLOB RCPR_INCLUDES "${CMAKE_CURRENT_SOURCE_DIR}/include/rcpr/*.h")
FILE(
    GLOB RCPR_STATUS_INCLUDES
    "${CMAKE_CURRENT_SOURCE_DIR}/include/rcpr/status/*.h")
FILE(
    GLOB RCPR_SHADOW_INCLUDES
    "${CMAKE_CURRENT_SOURCE_DIR}/include/rcpr/shadow/*.h")
FILE(
    GLOB RCPR_FIBER_INCLUDES
    "${CMAKE_CURRENT_SOURCE_DIR}/include/rcpr/fiber/*.h")
FILE(
    GLOB RCPR_FIBER_DISCIPLINE_INCLUDES
    "${CMAKE_CURRENT_SOURCE_DIR}/include/rcpr/fiber/disciplines/*.h")
FILE(
    GLOB RCPR_RESOURCE_INCLUDES
    "${CMAKE_CURRENT_SOURCE_DIR}/include/rcpr/resource/*.h")
INSTALL(FILES ${RCPR_INCLUDES} DESTINATION include/rcpr)
INSTALL(FILES ${RCPR_STATUS_INCLUDES} DESTINATION include/rcpr/status)
INSTALL(FILES ${RCPR_SHADOW_INCLUDES} DESTINATION include/rcpr/shadow)
INSTALL(FILES ${RCPR_FIBER_INCLUDES} DESTINATION include/rcpr/fiber)
INSTALL(
    FILES ${RCPR_FIBER_DISCIPLINE_INCLUDES}
    DESTINATION include/rcpr/fiber/disciplines)
INSTALL(FILES ${RCPR_RESOURCE_INCLUDES} DESTINATION include/rcpr/resource)
INSTALL(FILES ${CMAKE_BINARY_DIR}/include/rcpr/config.h DESTINATION include/rcpr)

#Install library
INSTALL(TARGETS rcpr rcpr-${CMAKE_PROJECT_VERSION}
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)

#Examples
ADD_SUBDIRECTORY(examples)
